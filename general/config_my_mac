#!/bin/zsh
#
# Configures    System Theme, Dock, Trackpad, Screenshots
# Uninstalls    iMovie, GarageBand
# Installs      Geekbench, Bitwarden, Signal, Proton Mail
emulate -LR zsh # reset zsh options

# path of currently executing script
DIR=${0:a:h}
# import common libraries
source $DIR/../lib/console_codes.zsh
source $DIR/../lib/getopts.zsh

# if software installs will occur
# check for homebrew and updates 
# and source the app install function
if ! should_skip "geekbench" || \
   ! should_skip "bitwarden" || \
   ! should_skip "signal" || \
   ! should_skip "protonmail"; then
    source $DIR/../lib/brew_check.zsh
    source $DIR/../lib/brew_app_install.zsh
fi

# in the case of modifying system preferences
if ! should_skip "theme" || \
   ! should_skip "dock" || \
   ! should_skip "dock"; then
   # Close open System Preferences panes, to prevent them from overriding settings.
    osascript -e 'tell application "System Preferences" to quit'
fi

restart_required=false
final_notes=""

########
# Theme
########
if should_skip "theme"; then
    echo -e "\nSkipping ${bold}System Theme${reset} configuration"
else
    echo -e "\nSetting system theme."

    # disable automatic theme switching 
    defaults write NSGlobalDomain AppleInterfaceStyleSwitchesAutomatically -bool true
    defaults delete NSGlobalDomain AppleInterfaceStyleSwitchesAutomatically
    # Set the system theme to dark
    defaults write NSGlobalDomain AppleInterfaceStyle -string "Dark"
    # UI must restart for changes to take effect
    if [ "$force" = true ]; then
        restart_required=true
        echo "${pink_f}System must restart for theme change to take effect.${reset}"
    else
        echo -e "\n${bold}Attention${reset}:"
        echo "macOS may request permission to control 'System Events' in order to set dark mode."
        # echo without newline
        echo -n "Press any key when ready.."
        read -k -s
        echo -e "\033[2K" # terminal escape - ^^ delete everything on current line 
        osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = true" >/dev/null
    fi

    echo "${green_f}${bold}System Theme${reset}${green_f} has been set.${reset}"

fi

#######
# Dock
#######
if should_skip "dock"; then
    echo -e "\nSkipping ${bold}Dock${reset} setup"
else
    echo -e "\nSetting up the Dock"

    # set the size of icons in the dock
    defaults write com.apple.dock tilesize -int 28
    # position dock on left of screen
    defaults write com.apple.dock orientation -string "left"
    # set the dock to autohide
    defaults write com.apple.dock autohide -bool true
    # stop recent apps from showing in the dock
    defaults write com.apple.dock show-recents -bool false

    # Dock must restart for changes to take effect
    killall Dock

    echo "${green_f}The ${bold}Dock${reset}${green_f} has been set up.${reset}"

fi

###########
# Trackpad
###########
if should_skip "trackpad"; then
    echo -e "\nSkipping ${bold}Trackpad${reset} configuration"
else
    echo -e "\nSetting Trackpad preferences"
    # enable tap to click
    defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
    # TODO: for some reason the checkbox isn't checked, but it works

    # set the click force
    defaults write com.apple.AppleMultitouchTrackpad FirstClickThreshold -int 0
    defaults write com.apple.AppleMultitouchTrackpad SecondClickThreshold -int 0

    # set cursor tracking speed (scale of 0-3)
    # [0, 0.125, 0.5, 0.6875, 0.875, 1, 1.5, 2, 2.5, 3]
    defaults write NSGlobalDomain com.apple.trackpad.scaling 2.5

    # TODO: can't figure out which process to restart to have changes take effect
    restart_required=true
    echo "${pink_f}System must restart for trackpad preferences to take effect.${reset}"

    echo "${green_f}${bold}Trackpad${reset}${green_f} preferences have been set.${reset}"

fi

#################
# screenshot.app
#################
if should_skip "screenshot"; then
    echo -e "\nSkipping ${bold}Screenshot.app${reset} configuration";
else
    echo -e "\nConfiguring screenshot.app"

    saveDir=~/Desktop/Screenshots
    # creating a dir on the desktop
    mkdir $saveDir 2>/dev/null
    # set the save dir
    defaults write com.apple.screencapture location -string $saveDir;
    # default the save view to the dir next time it opens
    defaults write com.apple.screencaptureui NSNavLastRootDirectory -string $saveDir;
    
    echo "${green_f}${bold}Screenshot.app${reset}${green_f} has been configured.${reset}"
    
fi

########
# bloat
########
if should_skip "bloat"; then
    echo -e "\nIgnoring Bloatware"
else

    echo -e "\nRemoving and consolidating bloatware"

    # iMovie
    # ------
    if [ "$force" != true ]; then
        echo -e "\n${yellow_f}${bold}Warning${reset}:"
        echo  "${bold}iMovie${reset} and any associated data is about to be deleted. This can not be undone."
        read -q "REPLY?Do you want to proceed? (y/n) " -k
        echo # move to a new line
    fi
    if [ "$force" = true ] || [[ $REPLY =~ ^[Yy]$ ]]; then

        # remove associated data
        rm -rf ~/Movies/iMovie\ Library.imovielibrary
        rm -rf ~/Movies/iMovie\ Theater.theater
        rm -rf ~/Library/Application\ Support/iMovie
        rm -rf ~/Library/Application\ Scripts/com.apple.iMovieApp
        rm -rf ~/Library/Containers/com.apple.iMovieApp
        rm -rf ~/Library/Containers/iMovie

        # remove the .app
        if [ "$force" = true ]; then
            final_notes+="\n${yellow_f}${bold}iMovie${reset}${yellow_f} requires escalated permissions and was ${bold}not${reset}${yellow_f} removed.${reset}"
            final_notes+="\nThis was skipped because the [-f] flag was passed and escalated permissions require user input.\n"
            
            echo -e "\n${yellow_f}${bold}iMovie${reset}${yellow_f} was not removed. Only its associated data was successfully removed.${reset}"
        else 
            echo -e "\niMovie requires escalated permissions to remove.\nPlease enter your login credentials below."
            sudo rm -rf /Applications/iMovie.app

            echo "${green_f}${bold}iMovie${reset}${green_f} and its associated data have been removed.${reset}"
        fi

    else
        echo "Skipping removal of iMovie";
    fi

    # GarageBand
    # ----------
    if [ "$force" != true ]; then
        echo -e "\n${yellow_f}${bold}Warning${reset}:"
        echo  "${bold}Garageband${reset} and any associated data is about to be deleted. This can not be undone."
        read -q "REPLY?Do you want to proceed? (y/n) " -k
        echo # move to a new line
    fi
    if [ "$force" = true ] || [[ $REPLY =~ ^[Yy]$ ]]; then

        # remove associated data
        rm -rf ~/Library/Application\ Scripts/com.apple.STMExtension.GarageBand
        rm -rf /Library/Audio/Apple\ Loops/Apple/Apple\ Loops\ for\ GarageBand

        # remove the .app
        if [ "$force" = true ]; then
            final_notes+="\n${yellow_f}${bold}GarageBand${reset}${yellow_f} requires escalated permissions and was ${bold}not${reset}${yellow_f} removed.${reset}"
            final_notes+="\nThis was skipped because the [-f] flag was passed and escalated permissions require user input.\n"
            
            echo -e "\n${yellow_f}${bold}GarageBand${reset}${yellow_f} was not removed. Only its associated data was successfully removed.${reset}"
        else 
            echo -e "\nGarageBand requires escalated permissions to remove.\nPlease enter your login credentials below."
            sudo rm -rf /Applications/GarageBand.app
            sudo rm -rf /Library/Application\ Support/GarageBand

            echo "${green_f}${bold}GarageBand${reset}${green_f} and its associated data have been removed.${reset}"
        fi

    else
        echo "Skipping removal of GarageBand";
    fi

    # Launchpad (springboard)
    # ---------
    source $DIR/../lib/launchpad_helpers.zsh

    echo -e "\nRe-organizing bloatware within launchpad"
    # defaults to 7col x 5row on 13" M2 Air
    # defaults write com.apple.dock springboard-columns -int ColNum
    # defaults write com.apple.dock springboard-rows -int RowNum
    #
    # must reset the launchpad before making modifications
    defaults write com.apple.dock ResetLaunchPad -bool true
    killall Dock
    sleep 5;

    newFolderPageKey=$(new_launchpad_folder "Bloatware üè¥‚Äç‚ò†Ô∏è")

    sqlite3 $(getconf DARWIN_USER_DIR)/com.apple.dock.launchpad/db/db <<EOF
        /* disable triggers */
        $(getToggleTriggersSQL 1)

        /* move apps onto the bloatware folder's first page */
        UPDATE items 
        SET parent_id=(SELECT value FROM dbinfo WHERE key='$newFolderPageKey') 
        WHERE rowid in (SELECT item_id FROM apps WHERE title in ('FaceTime', 'Maps', 'Messages', 'Music', 'News', 'Podcasts', 'Stocks', 'TV'));
        /* set the app order within the new folder - alphabetical */
        UPDATE items SET ordering=1 WHERE rowid=(SELECT item_id FROM apps WHERE title='FaceTime');
        UPDATE items SET ordering=2 WHERE rowid=(SELECT item_id FROM apps WHERE title='Maps');
        UPDATE items SET ordering=3 WHERE rowid=(SELECT item_id FROM apps WHERE title='Messages');
        UPDATE items SET ordering=4 WHERE rowid=(SELECT item_id FROM apps WHERE title='Music');
        UPDATE items SET ordering=5 WHERE rowid=(SELECT item_id FROM apps WHERE title='News');
        UPDATE items SET ordering=6 WHERE rowid=(SELECT item_id FROM apps WHERE title='Podcasts');
        UPDATE items SET ordering=7 WHERE rowid=(SELECT item_id FROM apps WHERE title='Stocks');
        UPDATE items SET ordering=8 WHERE rowid=(SELECT item_id FROM apps WHERE title='TV');

        /* cleanup temp folder variable */
        DELETE FROM dbinfo WHERE key in ('$newFolderPageKey');
        /* re-enable triggers */
        $(getToggleTriggersSQL 1)
EOF

    # restart dock for changes to sync
    killall Dock
    echo -e "${green_f}${bold}Bloatware${reset}${green_f} has been consolidated and/or removed.${reset}"
    
fi

############
# Bitwarden
############
if should_skip "bitwarden"; then
    echo -e "\nSkipping ${bold}Bitwarden.app${reset} installation";
else
    brew_app_install bitwarden
fi

############
# Geekbench
############
if should_skip "geekbench"; then
    echo -e "\nSkipping ${bold}Geekbench 5.app${reset} installation";
else
    brew_app_install geekbench false "/Applications/Geekbench 5.app"
fi

#########
# Signal
#########
if should_skip signal; then
    echo -e "\nSkipping ${bold}Signal.app${reset} installation";
else
    brew_app_install "signal"
fi

if $restart_required; then
    echo -e "\n${bold}Note${reset}: Some changes require a ${pink_f}logout and/or restart${reset} to take effect"
fi

echo -e $final_notes
# leave space above next terminal prompt for readability
echo ""
